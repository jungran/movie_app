{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","App","state","isLoadigng","movies","getMovies","a","axios","get","data","setState","isLoading","this","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"sTA+BeA,MA3Bf,YAA0D,EAA1CC,GAA2C,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC9C,OAAO,yBAAKC,UAAU,SACd,yBAAKC,IAAKH,EAAQF,MAAOA,EAAOM,IAAKN,IACrC,yBAAKI,UAAU,eACX,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAW,iBACVD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACZ,wBAAIC,IAAKD,EAAOL,UAAW,gBAA3B,IAA4CI,OAGhD,uBAAGJ,UAAU,kBAAkBH,EAAQU,MAAM,EAAG,KAAhD,UC4EDC,G,kNAnDXC,MAAQ,CACJC,YAAa,EACXC,OAAQ,I,EAGdC,U,sBAAW,8BAAAC,EAAA,sEAIKC,IAAMC,IACV,4DALD,gBAGKJ,EAHL,EAEAK,KACFA,KAAOL,OAIZ,EAAKM,SAAS,CAACN,SAAQO,WAAU,IAP1B,2C,kEAYPC,KAAKP,c,+BAGD,MAGwBO,KAAKV,MAA1BS,EAHH,EAGGA,UAAWP,EAHd,EAGcA,OAElB,OAAO,6BAASX,UAAU,aACdkB,EACC,6BACE,0BAAMlB,UAAU,eAAhB,eAKH,yBAAKA,UAAU,UACdW,EAAOR,KAAI,SAAAiB,GAAK,OACd,kBAAC,EAAD,CACKd,IAAKc,EAAM1B,GACXA,GAAI0B,EAAM1B,GACVC,KAAMyB,EAAMzB,KACZC,MAAOwB,EAAMxB,MACbC,QAASuB,EAAMvB,QACfC,OAAQsB,EAAMC,mBACdtB,OAAQqB,EAAMrB,kB,GA3ExBuB,IAAMC,YCFxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.30eecc93.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({id, year, title, summary, poster, genres}){\r\n    return <div className=\"movie\">\r\n            <img src={poster} title={title} alt={title}/>\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className =\"movie__genres\">\r\n                    {genres.map((genre, index) => ( //map은 key가 있어야 함.\r\n                    <li key={index} className =\"genres_genre\"> {genre}</li>\r\n                    ))}\r\n                </ul>\r\n                <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\r\n            </div>\r\n        </div>\r\n}\r\n\r\n\r\nMovie.propTypes={\r\n    id: PropTypes.number.isRequired\r\n    ,year:PropTypes.number.isRequired\r\n    ,title:PropTypes.string.isRequired\r\n    ,summary:PropTypes.string.isRequired\r\n    ,poster:PropTypes.string.isRequired\r\n    ,genres:PropTypes.arrayOf(PropTypes.string).isRequired\r\n\r\n};\r\n\r\nexport default Movie;","import React from 'react'; \n//import PropTypes from \"prop-types\";\nimport axios from 'axios';\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\n\nclass App extends React.Component{\n    \n /*   constructor(props){\n        super(props);\n        console.log(\"hello I'm a constructor\"); //render 보다 먼저 호출 됨\n                              //component가 mount 될 때(=스크린에 표시될 때) constructor를 호출한다.\n    }\n    state={\n        // \"state\" contains dynamic values of data. 변하는 데이터를 가지고 있음.\n        count : 0\n    };\n\n   add = () => {\n    //매번 state의 상태를 변경할 때 render function 을 호출해서 refresh 해야 함. \n    // 따라서 setState을 써야 함. setState이 호출되면 새로운 state과 함께 자동으로 render function 호출함.\n    this.setState(current => ({count: current.count + 1}));\n   };\n   \n   minus = () => {\n    this.setState(current => ({count: current.count - 1}));\n   };\n\n   componentDidMount(){\n       console.log('component rendered');\n   }\n\n   componentDidUpdate(){\n    console.log('component updated'); //render 다음에 호출됨.\n   }\n\n   componentWillUnmount(){\n       console.log('Goodbye cruel world');\n   } */\n    state = {\n        isLoadigng : false\n        , movies :[]\n    };\n\n    getMovies= async() => { // axios가 끝나기까지 기다려야 해서(await) 비동기로 걸고(async)\n        //javascript 에게 getMovies 가 시간이 조금 걸리기 때문에 기다려야 한다고 표시하는 것.\n        const {data: \n            {data:{ movies}}} \n            = await axios.get(\n                'https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n        //console.log(movies);\n        this.setState({movies, isLoading:false});\n    };\n\n    componentDidMount(){\n        // component가 mount 되자마자 호출 됨\n        this.getMovies();        \n    }\n\n    render(){\n        //react는 \"자동으로\" class component의 render method를 실행한다. \n        \n        const {isLoading, movies} = this.state;\n        \n        return <section className=\"container\">\n                   {isLoading \n                   ? <div>\n                       <span className='loader_text'>\n                           Loading...\n                       </span>\n                   </div>\n                   : (\n                    <div className=\"movies\">\n                    {movies.map(movie => (\n                       <Movie \n                            key={movie.id} \n                            id={movie.id}\n                            year={movie.year} \n                            title={movie.title} \n                            summary={movie.summary} \n                            poster={movie.medium_cover_image}\n                            genres={movie.genres}\n                         />\n                    ))}\n                    </div>\n                   )}\n                </section>; \n              };\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// <App /> ������ �͵� : component. react�� component�� �Բ� ������. component�� ����ϰ��� �� ��.\n// �� <App > ���¿��� ��. React�� components�� ����ؼ� HTMLó�� �ۼ��Ϸ��� ��쿡 �ʿ�.\n// component�� HTML�� ��ȯ�ϴ� �Լ�. data�� �����ִ� ��ҵ���.\n\n\n/*\n - JSX = Javascript + HTML. React�� Ưȭ�� ����.\n - REACT Application�� �� ���� �ϳ��� component�� rendering �� �� ����. ���� ��� ���� App �ȿ� ���� ��.\n\n \n */\n"],"sourceRoot":""}